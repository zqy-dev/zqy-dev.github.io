<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker命令</title>
    <url>/2023/08/03/Docker%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<blockquote>
<p>记录日常工作中常用命令</p>
</blockquote>
<!-- TOC -->
<ul>
<li><a href="#docker-build-%E5%91%BD%E4%BB%A4">Docker build 命令</a><ul>
<li><a href="#%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F">创建镜像</a></li>
</ul>
</li>
<li><a href="#docker-run-%E5%91%BD%E4%BB%A4">Docker run 命令</a></li>
<li><a href="#docker-image">Docker image</a><!-- TOC --></li>
</ul>
<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version    # docker版本信息</span><br><span class="line">docker info       # docker系统信息，包括镜像和容器数量</span><br><span class="line">docker 命令 --hlep # docker 命令 帮助 </span><br></pre></td></tr></table></figure>
<p><a href="https://docs.docker.com/reference/">命令文档地址</a></p>
<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><h2 id="Docker-build-命令"><a href="#Docker-build-命令" class="headerlink" title="Docker build 命令"></a>Docker build 命令</h2><hr>
<blockquote>
<p>docker build 命令用于使用Dockerfile创建镜像</p>
</blockquote>
<h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t $&#123;image_name&#125;:$&#123;tag_name&#125; .</span><br></pre></td></tr></table></figure>

<h2 id="Docker-run-命令"><a href="#Docker-run-命令" class="headerlink" title="Docker run 命令"></a>Docker run 命令</h2><hr>
<blockquote>
<p>docker run 命令创建一个新的容器并运行</p>
</blockquote>
<ul>
<li>参数</li>
</ul>
<table>
<thead>
<tr>
<th>option</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Docker-image"><a href="#Docker-image" class="headerlink" title="Docker image"></a>Docker image</h2><p><strong>未完待续</strong></p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker构建golang应用导入私有库依赖</title>
    <url>/2023/08/02/Docker%E6%9E%84%E5%BB%BAgolang%E5%BA%94%E7%94%A8%E5%AF%BC%E5%85%A5%E7%A7%81%E6%9C%89%E5%BA%93%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<blockquote>
<p>由于在日常工作中开发,会设置私有库依赖,当Dockerfile执行时会报错这时候我们要在Dockerfile设置一下私有库git设置<br>以下内容本人采用ssh方式</p>
</blockquote>
<h3 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h3><hr>
<ol>
<li>把本地id_rsa文件添加到容器中Dockerfile中添加如下指令 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ADD .ssh/ /root/.ssh/</span><br></pre></td></tr></table></figure></li>
<li>设置go env Dockerfile中添加如下指令 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENV CGO_ENABLED 0 </span><br><span class="line">ENV GOPROXY https://goproxy.cn,direct</span><br><span class="line">ENV  GO111MODULE on</span><br></pre></td></tr></table></figure></li>
<li>设置id_rsa文件权限Dockerfile中添加如下指令 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN <span class="built_in">chmod</span> 0600 /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li>
<li>设置go env私有库地址 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN go <span class="built_in">env</span> -w GOPRIVATE=github.com/<span class="variable">$&#123;your_name&#125;</span>/*</span><br></pre></td></tr></table></figure></li>
<li>设置git 配置 以ssh方式连接 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN apk add --no-cache git ca-certificates</span><br><span class="line">RUN git config --global url.<span class="string">&quot;git@github.com:&quot;</span>.insteadOf https://github.com/</span><br></pre></td></tr></table></figure></li>
<li>如果报错没有ssh命令 添加ssh命令 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN apk add --no-cache openssh-client </span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch常用的DSL脚本</title>
    <url>/2019/10/22/ElasticSearch%E5%B8%B8%E7%94%A8%E7%9A%84DSL%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<!--more!-->

<h1 id="Elasticsearch常用的DSL脚本"><a href="#Elasticsearch常用的DSL脚本" class="headerlink" title="Elasticsearch常用的DSL脚本"></a>Elasticsearch常用的DSL脚本</h1><ul>
<li><strong><font color=#FF5733>以下所有脚本执行都是使用Elasticsearch可视化工具Elasticsearch-head执行的,如果没有安装可以查看</font><br /><a href="/2019/10/22/%E6%90%AD%E5%BB%BAElasticSearch">搭建Elasticsearch</a></strong></li>
</ul>
<h2 id="新建索引"><a href="#新建索引" class="headerlink" title="新建索引"></a>新建索引</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">put http:<span class="comment">//localhost:9200/my_index_v1</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;index&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;refresh_interval&quot;</span>: <span class="string">&quot;60s&quot;</span>,</span><br><span class="line">          <span class="string">&quot;number_of_shards&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">          <span class="string">&quot;number_of_replicas&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;my_index&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;dynamic&quot;</span>: <span class="string">&quot;strict&quot;</span>,</span><br><span class="line">          <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;gender&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>如图所示添加成功</strong><br><img src="/2019/10/22/ElasticSearch%E5%B8%B8%E7%94%A8%E7%9A%84DSL%E8%84%9A%E6%9C%AC/%E6%96%B0%E5%BB%BA%E7%B4%A2%E5%BC%95.png"></p>
<h2 id="索引增加别名"><a href="#索引增加别名" class="headerlink" title="索引增加别名"></a>索引增加别名</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">put http:<span class="regexp">//</span>localhost:<span class="number">9200</span><span class="regexp">/my_index_v1/</span>_alias/my_index</span><br></pre></td></tr></table></figure>
<h2 id="查询索引别名"><a href="#查询索引别名" class="headerlink" title="查询索引别名"></a>查询索引别名</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">get http:<span class="regexp">//</span>localhost:<span class="number">9200</span><span class="regexp">/my_index_v1/</span>_alias/</span><br></pre></td></tr></table></figure>
<p><strong>查询结果如图所示</strong><br><img src="/2019/10/22/ElasticSearch%E5%B8%B8%E7%94%A8%E7%9A%84DSL%E8%84%9A%E6%9C%AC/%E6%9F%A5%E8%AF%A2%E7%B4%A2%E5%BC%95%E5%88%AB%E5%90%8D.png"></p>
<h2 id="查看别名指向了哪些索引"><a href="#查看别名指向了哪些索引" class="headerlink" title="查看别名指向了哪些索引"></a>查看别名指向了哪些索引</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">get http:<span class="regexp">//</span>localhost:<span class="number">9200</span><span class="regexp">/_alias/my</span>_index</span><br></pre></td></tr></table></figure>

<p>##Elasticsearch添加索引别名的好处以及操作</p>
<ul>
<li>索引别名就像一个快捷方式或软连接，可以指向一个或多个索引，也可以给任何一个需要索引名的API来使用，而且别名不能与索引同名。</li>
<li>别名带给我们极大的灵活性，允许我们做下面这些：<ol>
<li>在运行的集群中可以无缝的从一个索引切换到另一个索引。</li>
<li>给多个索引分组。</li>
<li>给索引的一个子集创建视图。</li>
</ol>
</li>
<li>修改别名指向新的索引,(当数据已经迁移到新的索引时候可以让别名执行新的索引,下面例子是从my_index_v1升级到my_index_v2的操作)<br>*. Elasticsearch索引别名管理支持单个索引操作也支持多个索引操作<ol>
<li>单个索引操作: _alias</li>
<li>多个索引操作: _aliases</li>
</ol>
<ul>
<li>下面命令使用的是多个索引操作,删除my_index_v1的别名,在my_index_v2上面新建这个别名<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">post http:<span class="regexp">//</span>localhost<span class="regexp">/_aliases/</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;actions&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;remove&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;index&quot;</span>: <span class="string">&quot;my_index_v1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;alias&quot;</span>: <span class="string">&quot;my_index&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;add&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;index&quot;</span>: <span class="string">&quot;my_index_v2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;alias&quot;</span>: <span class="string">&quot;my_index&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<strong><font color=#FF5733>Es的查询是基于索引别名来查询的,所以我们在完成数据迁移之后,只需要把原始的索引别名指向新的索引就可以实现零停机升级索引了</font><br /></strong></li>
</ul>
</li>
</ul>
<h2 id="原始mapping里面增加字段"><a href="#原始mapping里面增加字段" class="headerlink" title="原始mapping里面增加字段"></a>原始mapping里面增加字段</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">put http:<span class="regexp">//</span>localhost:<span class="number">9200</span><span class="regexp">/my_index_v1/</span>_mapping/my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>如果所示增加成功</strong><br><img src="/2019/10/22/ElasticSearch%E5%B8%B8%E7%94%A8%E7%9A%84DSL%E8%84%9A%E6%9C%AC/%E6%96%B0%E5%A2%9E%E5%AD%97%E6%AE%B5.png"></p>
<h2 id="mapping新增时间字段"><a href="#mapping新增时间字段" class="headerlink" title="mapping新增时间字段"></a>mapping新增时间字段</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">put http:<span class="regexp">//</span>localhost:<span class="number">9200</span><span class="regexp">/my_index_v1/</span>_mapping/my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;dynamic_date_formats&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;yyyy-MM-dd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yyyy-MM-ddHH: mm: ss&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yy-MM-ddHH: mm: ss&quot;</span>,</span><br><span class="line">    <span class="string">&quot;date_optional_time&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;createTime&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;updateTime&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><font color=#FF5733></font><br /></strong></p>
<h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">post http:<span class="regexp">//</span>localhost:<span class="number">9200</span><span class="regexp">/my_index_v1/my</span>_index</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">   <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">   <span class="string">&quot;age&quot;</span>: <span class="number">20</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><strong>如图所示添加数据成功</strong><br><img src="/2019/10/22/ElasticSearch%E5%B8%B8%E7%94%A8%E7%9A%84DSL%E8%84%9A%E6%9C%AC/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE.png"></p>
<h2 id="查询全部数据"><a href="#查询全部数据" class="headerlink" title="查询全部数据"></a>查询全部数据</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">post http:<span class="regexp">//</span>localhost:<span class="number">9200</span><span class="regexp">/my_index_v1/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;must&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/10/22/ElasticSearch%E5%B8%B8%E7%94%A8%E7%9A%84DSL%E8%84%9A%E6%9C%AC/match_all.png"></p>
<ol>
<li>took:表示查询执行时长(单位是毫秒)</li>
<li>time_out:查询是否超时:如果是true证明查询超时,<font color=#FF5733>【注】超时不代表此次查询操作就会直接终止，es其实后台还在继续执行</font><br /></li>
<li>_shards:分片的详情</li>
<li>hits:查询的数据详情</li>
<li>total:查询到的总数</li>
</ol>
<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><ul>
<li><font color=#FF5733>分页查询正常情况下我们使用的是如下DSL脚本,但是这种脚本有一个坑,Elasticsearch本身有一个限制,当from大于等于10000的时候就会报错</font><br /><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: &#123;</span><br><span class="line">        &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;<span class="selector-tag">from</span>&quot;: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2019/10/22/ElasticSearch%E5%B8%B8%E7%94%A8%E7%9A%84DSL%E8%84%9A%E6%9C%AC/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E5%BC%82%E5%B8%B8.png"></li>
</ul>
<h2 id="删除符合条件下的所有数据"><a href="#删除符合条件下的所有数据" class="headerlink" title="删除符合条件下的所有数据"></a>删除符合条件下的所有数据</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">post http:<span class="regexp">//</span>localhost:<span class="number">9200</span><span class="regexp">/my_index_v1/</span>_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;must&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Slice自动扩容机制</title>
    <url>/2023/08/15/Go%E5%88%87%E7%89%87%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<blockquote>
<p>以下内容仅个人理解整理，仅供参考</p>
</blockquote>
<blockquote>
<p>在go1.18版本之后(含1.18)go slice append相比之前版本growslice函数已经发生变化,<br>在<a href="https://tip.golang.org/doc/go1.18#runtime">Go 1.18 Release Notes</a>中提到<br>The built-in function append now uses a slightly different formula when deciding how much to grow a slice when it must allocate a new underlying array. The new formula is less prone to sudden transitions in allocation behavior.</p>
</blockquote>
<blockquote>
<p>以下是1.18中runtime.growslice函数实现，只截取主要代码</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">growslice</span><span class="params">(et *_type, old slice, <span class="built_in">cap</span> <span class="type">int</span>)</span></span> slice &#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">	newcap := old.<span class="built_in">cap</span></span><br><span class="line">	doublecap := newcap + newcap</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">cap</span> &gt; doublecap &#123;</span><br><span class="line">		newcap = <span class="built_in">cap</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> threshold = <span class="number">256</span></span><br><span class="line">		<span class="keyword">if</span> old.<span class="built_in">cap</span> &lt; threshold &#123;</span><br><span class="line">			newcap = doublecap</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// Check 0 &lt; newcap to detect overflow</span></span><br><span class="line">			<span class="comment">// and prevent an infinite loop.</span></span><br><span class="line">			<span class="keyword">for</span> <span class="number">0</span> &lt; newcap &amp;&amp; newcap &lt; <span class="built_in">cap</span> &#123;</span><br><span class="line">				<span class="comment">// Transition from growing 2x for small slices</span></span><br><span class="line">				<span class="comment">// to growing 1.25x for large slices. This formula</span></span><br><span class="line">				<span class="comment">// gives a smooth-ish transition between the two.</span></span><br><span class="line">				newcap += (newcap + <span class="number">3</span>*threshold) / <span class="number">4</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// Set newcap to the requested cap when</span></span><br><span class="line">			<span class="comment">// the newcap calculation overflowed.</span></span><br><span class="line">			<span class="keyword">if</span> newcap &lt;= <span class="number">0</span> &#123;</span><br><span class="line">				newcap = <span class="built_in">cap</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以下是1.17版本runtime.growslice函数实现</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">growslice</span><span class="params">(et *_type, old slice, <span class="built_in">cap</span> <span class="type">int</span>)</span></span> slice &#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">	newcap := old.<span class="built_in">cap</span></span><br><span class="line">	doublecap := newcap + newcap</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">cap</span> &gt; doublecap &#123;</span><br><span class="line">		newcap = <span class="built_in">cap</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> old.<span class="built_in">cap</span> &lt; <span class="number">1024</span> &#123;</span><br><span class="line">			newcap = doublecap</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// Check 0 &lt; newcap to detect overflow</span></span><br><span class="line">			<span class="comment">// and prevent an infinite loop.</span></span><br><span class="line">			<span class="keyword">for</span> <span class="number">0</span> &lt; newcap &amp;&amp; newcap &lt; <span class="built_in">cap</span> &#123;</span><br><span class="line">				newcap += newcap / <span class="number">4</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// Set newcap to the requested cap when</span></span><br><span class="line">			<span class="comment">// the newcap calculation overflowed.</span></span><br><span class="line">			<span class="keyword">if</span> newcap &lt;= <span class="number">0</span> &#123;</span><br><span class="line">				newcap = <span class="built_in">cap</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看出在 Go 1.18 中，扩容策略 (不考虑内存对齐的情况下) 变成了：<br>如果期望容量大于当前容量的两倍就会使用期望容量<br>如果当前切片的长度小于 256 就会将容量翻倍<br>如果当前切片的长度大于 256 就会每次增加 25% 的同时再增加 192(256 的 3&#x2F;4)，直到新容量大于期望容量<br>按照注释的说法是新的公式 newcap +&#x3D; (newcap + 3*threshold) &#x2F; 4 会使得容量的变化更加平滑。<br>我们可以看到1.17版本采用的公式是而且临界值是1024 newcap +&#x3D; newcap &#x2F; 4</p>
</blockquote>
]]></content>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2019/11/06/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><ul>
<li><strong><font color=#FF5733>以下所有操作命令都是基于CentOS7</font><br /></strong></li>
</ul>
<h2 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h2><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="comment">--state</span></span><br></pre></td></tr></table></figure>

<h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<h2 id="禁止开机启动防火墙"><a href="#禁止开机启动防火墙" class="headerlink" title="禁止开机启动防火墙"></a>禁止开机启动防火墙</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld.service </span><br></pre></td></tr></table></figure>

<h2 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>selinux/config</span><br></pre></td></tr></table></figure>
<p><strong>将SELINUX&#x3D;enforcing改为SELINUX&#x3D;disabled</strong></p>
<h2 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h2><ul>
<li>查看系统磁盘空间的使用情况</li>
</ul>
<p><strong>命令参数:</strong><br>    <figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-h 以容易理解的格式(给人看的格式)输出文件系统分区使用情况，例如 10kB、10MB、10GB 等。</span></span><br><span class="line"><span class="deletion">-k 以 kB 为单位输出文件系统分区使用情况。</span></span><br><span class="line"><span class="deletion">-m 以 mB 为单位输出文件系统分区使用情况。</span></span><br><span class="line"><span class="deletion">-a 列出所有的文件系统分区，包含大小为 0 的文件系统分区。</span></span><br><span class="line"><span class="deletion">-i 列出文件系统分区的 inodes 信息。</span></span><br><span class="line"><span class="deletion">-T 显示磁盘分区的文件系统类型。</span></span><br></pre></td></tr></table></figure></p>
<p><strong>查看系统的分区使用情况，并显示文件系统的类型</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">df</span> -hT</span></span><br></pre></td></tr></table></figure>
<p><strong>查看某个目录所在分区的磁盘使用情况</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">df</span> -h <span class="built_in">test</span>/</span></span><br></pre></td></tr></table></figure>
<p><strong>输出文件系统的 inodes 信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">df</span> -ih</span></span><br></pre></td></tr></table></figure>

<h2 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h2><ul>
<li>显示文件或目录所占的磁盘空间</li>
</ul>
<p><strong>命令参数:</strong><br>    <figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-h 以容易理解的格式(给人看的格式)输出文件系统分区使用情况，例如 10kB、10MB、10GB 等。</span></span><br><span class="line"><span class="deletion">-s 显示文件或整个目录的大小，默认单位为 kB</span></span><br></pre></td></tr></table></figure></p>
<p><strong>显示当前目录大小</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">du</span> -hs</span></span><br></pre></td></tr></table></figure>
<p><strong>显示当前目录下所有文件的大小</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">du</span> -hs ./*</span></span><br></pre></td></tr></table></figure>

<h2 id="同步时间"><a href="#同步时间" class="headerlink" title="同步时间"></a>同步时间</h2><p><strong>查看当前时区</strong></p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">$ timedatectl status|<span class="type">grep</span> &#x27;<span class="keyword">Time</span> zone&#x27;</span><br></pre></td></tr></table></figure>
<p><strong>设置时区</strong></p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">$ <span class="string">timedatectl</span> <span class="built_in">set-timezone</span> <span class="string">Asia</span>/<span class="string">Shanghai</span></span><br></pre></td></tr></table></figure>
<p><strong>安装ntpdate命令</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ yum -y <span class="keyword">install</span> ntpdate</span><br></pre></td></tr></table></figure>
<p><strong>同步时间</strong></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">$ ntpdate -u  pool.ntp<span class="meta">.org</span></span><br></pre></td></tr></table></figure>
<p><strong>查看时间是否同步成功</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">date</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql</title>
    <url>/2023/07/27/Mysql/</url>
    <content><![CDATA[<blockquote>
<p>Mysql 知识积累</p>
</blockquote>
<h3 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a>B树和B+树的区别</h3><hr>
<ul>
<li>相同点：都有根节点和叶子节点，叶子节点都是有顺序的</li>
<li>不同点:B+树在B树基础上叶子节点增加了双向指针,叶子节点上都冗余了一份根节点</li>
</ul>
<h3 id="InnoDB与MyISAM区别"><a href="#InnoDB与MyISAM区别" class="headerlink" title="InnoDB与MyISAM区别"></a>InnoDB与MyISAM区别</h3><hr>
<ul>
<li>InnoDB支持事务,MyISAM不支持事务</li>
<li>InnoDB支持行锁,MyISAM支持表锁</li>
<li>InnoDB支持外键,MyISAM不支持</li>
<li>InnoDB是聚集索引,MyISAM是非聚集索引</li>
</ul>
<h3 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h3><hr>
<ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离型</li>
<li>持久性</li>
</ul>
<h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><hr>
<table>
<thead>
<tr>
<th>事务隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>Read Uncommitted</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Read Committed</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Repeatable Read</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>Serializable</td>
<td>N</td>
<td>N</td>
<td>N</td>
</tr>
</tbody></table>
<ul>
<li>读未提交(Read Uncommitted)容易产生脏读,不可重复读,幻读问题</li>
<li>读已提交(Read Committed)容易产生不可重复读,幻读问题</li>
<li>可重复读(Repeatable Read)是mysql默认的事务隔离级别机制，容易产生幻读问题但是innodb存储引擎除外</li>
<li>串行化(Serializable)不会产生任何问题但是需要加读锁,会导致性能问题</li>
<li>脏读指读取到其它事务未提交的数据</li>
<li>不可重复读指并发更新时俩次查询相同数据与预期数据不一致</li>
<li>幻读指并发新增删除时产生数量变化操作时,另一个事务前后查询数据不符合预期</li>
</ul>
<h3 id="Repeatable-Read事务隔离级别下InnoDB不会产生幻读的原因"><a href="#Repeatable-Read事务隔离级别下InnoDB不会产生幻读的原因" class="headerlink" title="Repeatable Read事务隔离级别下InnoDB不会产生幻读的原因"></a>Repeatable Read事务隔离级别下InnoDB不会产生幻读的原因</h3><hr>
<p>未完待续</p>
]]></content>
      <tags>
        <tag>msql</tag>
      </tags>
  </entry>
  <entry>
    <title>go-build可执行文件</title>
    <url>/2023/08/01/go-build%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>Golang 支持在一个平台下生成另一个平台可执行程序的交叉编译功能。</p>
</blockquote>
<h3 id="Windows系统下build-Mac-Linux平台的64位可执行程序"><a href="#Windows系统下build-Mac-Linux平台的64位可执行程序" class="headerlink" title="Windows系统下build Mac, Linux平台的64位可执行程序"></a>Windows系统下build Mac, Linux平台的64位可执行程序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET CGO_ENABLED=0SET GOOS=darwin3 SET GOARCH=amd64 go build main.go</span><br><span class="line">SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 go build  main.go</span><br></pre></td></tr></table></figure>

<h3 id="Mac下build-Linux-Windows平台的64位可执行程序"><a href="#Mac下build-Linux-Windows平台的64位可执行程序" class="headerlink" title="Mac下build Linux, Windows平台的64位可执行程序"></a>Mac下build Linux, Windows平台的64位可执行程序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go</span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go</span><br></pre></td></tr></table></figure>

<h3 id="Linux下build-Mac-Windows平台的64位可执行程序"><a href="#Linux下build-Mac-Windows平台的64位可执行程序" class="headerlink" title="Linux下build Mac, Windows平台的64位可执行程序"></a>Linux下build Mac, Windows平台的64位可执行程序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build main.go</span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注:如果mac是m1芯片的设置GOARCH&#x3D;arm</strong><br><strong>GOOS：目标可执行程序运行操作系统，支持 darwin，freebsd，linux，windows</strong><br><strong>GOARCH：目标可执行程序操作系统构架，包括386，amd64，arm</strong></p>
</blockquote>
]]></content>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>学习Docker</title>
    <url>/2023/08/16/%E5%AD%A6%E4%B9%A0Docker/</url>
    <content><![CDATA[<blockquote>
<p>记录学习Docker过程知识点</p>
</blockquote>
<h3 id="Docker为什么比VM快？"><a href="#Docker为什么比VM快？" class="headerlink" title="Docker为什么比VM快？"></a>Docker为什么比VM快？</h3><ol>
<li>Docker有着比VN更少的抽象层</li>
<li>Docker使用的是宿主机的内核，VM使用的Guest OS<br><img src="/2023/08/16/%E5%AD%A6%E4%B9%A0Docker/Docker_VM%E5%AF%B9%E6%AF%94%E5%9B%BE.png"><br>所以说，当新建一个容器时候Docker不需要像VM一样重新加载一个操作系统内核</li>
</ol>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建ElasticSearch</title>
    <url>/2019/10/22/%E6%90%AD%E5%BB%BAElasticSearch/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Windows搭建Elasticsearch"><a href="#Windows搭建Elasticsearch" class="headerlink" title="Windows搭建Elasticsearch"></a>Windows搭建Elasticsearch</h1><ul>
<li><strong><a href="https://www.elastic.co/downloads/Elasticsearch"><font color="#1A5276">Elasticsearch下载</font><br/></a></strong></li>
</ul>
<ol>
<li>下载好之后解压到自己的目录,切到安装的Elasticsearch-6.6.1&#x2F;bin目录下,执行Elasticsearch.bat命令即可,等待控制台信息出现如下示例<br><img src="/2019/10/22/%E6%90%AD%E5%BB%BAElasticSearch/start_es.png"></li>
<li>打开浏览器输入localhost:9200;出现如下示例证明安装成功<br><img src="/2019/10/22/%E6%90%AD%E5%BB%BAElasticSearch/start_es_02.png"></li>
</ol>
<ul>
<li><p>一般情况下,我们会通过一个可视化工具来查看ES的状态以及数据,这个时候我们需要安装一个Elasticsearch-head,在安装之前我们做好环境准备</p>
<ol>
<li>安装node: <strong><a href="http://nodejs.cn/download/"><font color=#1A5276>node下载</font><br/></a></strong> 下载完成后选择安装路径,一路next即可,安装完成以后打开cmd命令行输入node –version出现版本号即为成功</li>
<li>切换到刚刚安装的node目录下,执行安装grunt命令:npm install -g grunt-cli</li>
<li>所以依赖安装完成之后,现在准备安装head: <strong><a href="https://github.com/mobz/Elasticsearch-head"><font color=#1A5276>Elasticsearch-head下载<font><br/></a></strong> 下载.zip包完成之后解压即可,打开cmd切换到Elasticsearch-head目录下执行启动命令:npm run start出现如下示例证明启动成功<br><img src="/2019/10/22/%E6%90%AD%E5%BB%BAElasticSearch/elasticsearch-head-satrt.png"></li>
<li>打开浏览器输localhost:9100;初夏如下示例证明安装成功<br><img src="/2019/10/22/%E6%90%AD%E5%BB%BAElasticSearch/elasticsearch-head-desktop.png"></li>
</ol>
</li>
<li><p><strong><font color="#E74C3C">如果打开Elasticsearch-head界面发现是未连接灰色的如图所示,这时候不要慌,切到Elasticsearch-6.6.1&#x2F;config目录下找到Elasticsearch.yml文件,打开文件在最下方添加</font><br /></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/10/22/%E6%90%AD%E5%BB%BAElasticSearch/%E6%9C%AA%E8%BF%9E%E6%8E%A5%E7%B4%A0%E6%9D%90.png"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Environment build</tag>
      </tags>
  </entry>
  <entry>
    <title>go-zero常用命令</title>
    <url>/2023/08/04/go-zero%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<blockquote>
<p>go-zero 是一个集成了各种工程实践的 web 和 rpc 框架。通过弹性设计保障了大并发服务端的稳定性，经受了充分的实战检验。<br>go-zero 包含极简的 API 定义和生成工具 goctl，可以根据定义的 api 文件一键生成 Go, iOS, Android, Kotlin, Dart, TypeScript, JavaScript 代码，并可直接运行。<br><a href="https://go-zero.dev/docs/tasks/installation/goctl">goctl安装</a></p>
</blockquote>
<h2 id="goctl命令"><a href="#goctl命令" class="headerlink" title="goctl命令"></a>goctl命令</h2><hr>
<!-- TOC -->
<ul>
<li><a href="#goctl%E5%91%BD%E4%BB%A4">goctl命令</a><ul>
<li><a href="#goctl-api-%E7%94%9F%E6%88%90go%E4%BB%A3%E7%A0%81%E5%91%BD%E4%BB%A4">goctl api 生成go代码命令</a></li>
<li><a href="#goctl-%E7%94%9F%E6%88%90dockerfile%E5%91%BD%E4%BB%A4">goctl 生成dockerfile命令</a></li>
<li><a href="#goctl-grpc-%E7%94%9F%E6%88%90go%E4%BB%A3%E7%A0%81%E5%91%BD%E4%BB%A4">goctl grpc 生成go代码命令</a><!-- TOC --></li>
</ul>
</li>
</ul>
<h3 id="goctl-api-生成go代码命令"><a href="#goctl-api-生成go代码命令" class="headerlink" title="goctl api 生成go代码命令"></a>goctl api 生成go代码命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">goctl api go -api <span class="variable">$&#123;your_file.api&#125;</span> -<span class="built_in">dir</span> ./ --style=goZero --home <span class="variable">$&#123;your_template&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>参数详解<ul>
<li>-api 自行编写的api文件 <a href="https://go-zero.dev/docs/tasks/dsl/api">语法参考</a></li>
<li>-dir 生成代码存放的路径</li>
<li>–style 生成代码文件命名风格,这里使用驼峰风格</li>
<li>–home 指定自定义模版(如果没有可以不写这个参数,使用默认),想自定义模版可以参考<a href="https://go-zero.dev/docs/tutorials/customization/template">模版定制化</a></li>
</ul>
</li>
</ul>
<h3 id="goctl-生成dockerfile命令"><a href="#goctl-生成dockerfile命令" class="headerlink" title="goctl 生成dockerfile命令"></a>goctl 生成dockerfile命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">goctl docker --go main.go --exe main</span><br></pre></td></tr></table></figure>
<ul>
<li>参数详解<ul>
<li>–go 主函数启动项</li>
<li>–exe 可执行文件名称一般与主函数文件名字相同</li>
</ul>
</li>
</ul>
<h3 id="goctl-grpc-生成go代码命令"><a href="#goctl-grpc-生成go代码命令" class="headerlink" title="goctl grpc 生成go代码命令"></a>goctl grpc 生成go代码命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分组</span></span><br><span class="line">goctl rpc  protoc ./pb/test.proto --go_out=./pb --go-grpc_out=./pb --zrpc_out=. -m</span><br><span class="line"><span class="comment"># 不分组</span></span><br><span class="line">goctl rpc  protoc ./pb/test.proto --go_out=./pb --go-grpc_out=./pb --zrpc_out=.</span><br><span class="line"><span class="comment"># proto文件引用第三方文件</span></span><br><span class="line">goctl rpc protoc \</span><br><span class="line"> -I /Users/qy/go/src/github.com/gogo/protobuf/gogoproto/ \</span><br><span class="line"> --go_out=./pb \</span><br><span class="line"> --go-grpc_out=./pb \</span><br><span class="line"> -I ./pb/ \</span><br><span class="line"> ./pb/attachment.proto \</span><br><span class="line"> --zrpc_out=.</span><br></pre></td></tr></table></figure>
<ul>
<li>分组生成效果参考<a href="https://go-zero.dev/docs/tutorials/proto/services/group">服务分组</a></li>
<li>参数详解<ul>
<li>–go_out 是protoc里面指令参数，表示生成go文件存放路径</li>
<li>–go-grpc_out 是protoc里面指令参数，表示生成go_grpc文件存放路径</li>
<li>–zrpc_out 是goctl rpc protoc指令参数,表示生成代码文件存放路径</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建MySql</title>
    <url>/2019/12/10/%E6%90%AD%E5%BB%BAMySql/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="Linux服务器搭建Mysql"><a href="#Linux服务器搭建Mysql" class="headerlink" title="Linux服务器搭建Mysql"></a>Linux服务器搭建Mysql</h2><ol>
<li><strong>创建mysql用户组</strong><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo groupadd mysql</span></span><br><span class="line"><span class="attribute">sudo useradd -g mysql mysql</span></span><br></pre></td></tr></table></figure></li>
<li><strong>创建mysql初始化目录</strong><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;instport&#125;</span>为新建的实例端口号，如<span class="number">3306</span></span><br><span class="line">sudo mkdir -p <span class="regexp">/home/my</span>sql<span class="regexp">/multi/</span><span class="variable">$&#123;instport&#125;</span>/lock</span><br><span class="line">sudo mkdir -p <span class="regexp">/home/my</span>sql<span class="regexp">/multi/</span><span class="variable">$&#123;instport&#125;</span>/etc</span><br><span class="line">sudo mkdir -p <span class="regexp">/home/my</span>sql<span class="regexp">/multi/</span><span class="variable">$&#123;instport&#125;</span>/log</span><br><span class="line">sudo mkdir -p <span class="regexp">/home/my</span>sql<span class="regexp">/multi/</span><span class="variable">$&#123;instport&#125;</span>/pid</span><br><span class="line">sudo mkdir -p <span class="regexp">/home/my</span>sql<span class="regexp">/multi/</span><span class="variable">$&#123;instport&#125;</span>/socket</span><br><span class="line">sudo mkdir -p <span class="regexp">/home/my</span>sql<span class="regexp">/multi/</span><span class="variable">$&#123;instport&#125;</span>/tmp</span><br><span class="line">注意binlog和data目录放到数据盘：</span><br><span class="line">sudo mkdir -p <span class="regexp">/data1/my</span>sql<span class="regexp">/multi/</span><span class="variable">$&#123;instport&#125;</span>/binlog</span><br><span class="line">sudo mkdir -p <span class="regexp">/data1/my</span>sql<span class="regexp">/multi/</span><span class="variable">$&#123;instport&#125;</span>/data</span><br></pre></td></tr></table></figure></li>
<li><strong>在&#x2F;home&#x2F;mysql&#x2F;multi&#x2F;${instport}&#x2F;etc中放入my.cnf配置文件</strong><br> <strong><a href="https://pan.baidu.com/s/1ZV79aXaEvjuCXDpP0YtA2Q"><font color="#1326C8">拿走不谢</font><br/></a></strong></li>
<li><strong>解压mysql安装包并创建软链接</strong><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf mysql-<span class="number">5</span>.<span class="number">7</span>.<span class="number">28</span>-linux-glibc2.<span class="number">12</span>-x86_64.tar.gz -C 解压到指定目录</span><br><span class="line"><span class="attribute">ln</span> -s /解压路径/mysql-<span class="number">5</span>.<span class="number">7</span>.<span class="number">28</span>-linux-glibc2.<span class="number">12</span>-x86_64 /home/mysql/base</span><br></pre></td></tr></table></figure></li>
<li>修改用户组：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R mysql:mysql /home/mysql/</span><br><span class="line">sudo <span class="built_in">chown</span> -R mysql:mysql /data1/mysql/</span><br></pre></td></tr></table></figure></li>
<li>初始化mysql实例，以3306实例为例： <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/home/my</span>sql<span class="regexp">/base/</span>bin<span class="regexp">/mysqld --defaults-file=/</span>home<span class="regexp">/mysql/mu</span>lti<span class="regexp">/$&#123;instport&#125;/</span>etc/my.cnf --initialize</span><br></pre></td></tr></table></figure>
 <strong><font color="#E74C3C">注意1：</font><br/></strong> <figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">如果初始化时，出现如下报错：</span><br><span class="line"><span class="regexp">/home/my</span>sql<span class="regexp">/base/</span>bin/mysqld: error <span class="keyword">while</span> loading shared libraries: libaio.so.<span class="number">1</span>: cannot open shared object <span class="keyword">file</span>: No such <span class="keyword">file</span> or directory</span><br><span class="line">解决方法：</span><br><span class="line">sudo yum install -y libaio</span><br></pre></td></tr></table></figure>
 <strong><font color="#E74C3C">注意2：</font><br/></strong> <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">如果需要重新执行初始化命令，则需要先删掉数据目录下的所有内容，然后再执行初始化命令：</span><br><span class="line">sudo rm -rf <span class="regexp">/data1/my</span>sql<span class="regexp">/multi/</span><span class="variable">$&#123;instport&#125;</span><span class="regexp">/data/</span>*</span><br></pre></td></tr></table></figure></li>
<li><strong>初始化后找到&#x2F;home&#x2F;mysql&#x2F;multi&#x2F;${instport}&#x2F;log&#x2F;mysql-error.log输出的密码，用作root登录</strong><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">找临时密码的方法：</span><br><span class="line">sudo cat <span class="regexp">/home/my</span>sql<span class="regexp">/multi/</span><span class="variable">$&#123;instport&#125;</span><span class="regexp">/log/my</span>sql-error.log |grep <span class="string">&#x27;temporary password&#x27;</span></span><br><span class="line">找到如下内容：</span><br><span class="line">A temporary password is generated <span class="keyword">for</span> root@localhost: aXnUAxMil45d2</span><br><span class="line">密码为：aXnUAxMil45d2</span><br></pre></td></tr></table></figure></li>
<li><strong>在&#x2F;home&#x2F;mysql下面增加mysql服务启动&#x2F;停止脚本</strong><br> <strong><a href="https://pan.baidu.com/s/1n-FQQinXLyQsQ2rhmuls-Q"><font color="#1326C8">拿走不谢</font><br/></a></strong></li>
<li><strong>启动mysql服务：</strong><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo -u mysql bash <span class="regexp">/home/my</span>sql/mysql.sh  -P <span class="variable">$&#123;instport&#125;</span> start</span><br></pre></td></tr></table></figure></li>
<li><strong>临时登录mysql</strong><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/home/my</span>sql<span class="regexp">/base/</span>bin<span class="regexp">/mysql -h localhost -S /</span>home<span class="regexp">/mysql/mu</span>lti<span class="regexp">/$&#123;instport&#125;/</span>socket/mysql.sock  -uroot -P<span class="variable">$&#123;instport&#125;</span> -p<span class="string">&#x27;aXnUAxMil45d2&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>登录后，首先修改mysql root默认密码及host：</strong><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span><span class="operator">=</span><span class="string">&#x27;新密码&#x27;</span>; </span><br><span class="line">flush  privileges; </span><br></pre></td></tr></table></figure></li>
<li><strong>执行 exit 退出,重新登录</strong><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/home/my</span>sql<span class="regexp">/base/</span>bin/mysql -h localhost -uroot -P<span class="variable">$&#123;instport&#125;</span> -pnewPassword</span><br></pre></td></tr></table></figure></li>
<li><strong>修改支持主机ip方式连接</strong><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span><span class="keyword">and</span> `<span class="keyword">user</span>`<span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<strong>执行exit退出,就可以使用本机Ip连接了,也可以使用Navicat远程连接</strong></li>
</ol>
<p><strong><font color="#E74C3C">至此！已经搭建完成,祝您工作愉快！！！</font><br/></strong></p>
]]></content>
      <tags>
        <tag>Environment build</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis过期策略与淘汰策略</title>
    <url>/2019/11/15/Redis%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E4%B8%8E%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="Redis过期策略"><a href="#Redis过期策略" class="headerlink" title="Redis过期策略"></a>Redis过期策略</h2><ul>
<li><p><strong>我们都知道redis是K&#x2F;V存储的形式,我们可以设置K的过期时间,过期策略也就是说当K过期了,Redis将如何处理！</strong></p>
</li>
<li><p><strong>过期策略有三种</strong></p>
<ol>
<li><strong>定时过期:每个设置过期时间的Key,都会创建一个定时器,当Key过期时间到了,Redis会立即删除过期数据,这一点对于Memory来讲还是很友好的;但是会占用大量的CPU资源去处理过期的数据,从而影响Cache的响应时间&amp;吞吐量</strong></li>
<li><strong>惰性过期:只有当访问一个Key的时候,Redis才会去判断这个Key是否已经过期,如果过期就清除数据,这种策略可以最大化的减少cpu资源使用率,却对Memory不友好,如果有很多过期的Key一直不被访问,那就一直不会被清除,所以很占内存资源</strong></li>
<li><strong>定期过期:每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。</strong><br><strong>(expires字典会保存所有设置了过期时间的key的过期时间数据，其中，key是指向键空间中的某个键的指针，value是该键的毫秒精度的UNIX时间戳表示的过期时间。键空间是指该Redis集群中保存的所有键。)</strong></li>
</ol>
</li>
</ul>
<h2 id="Redis淘汰策略"><a href="#Redis淘汰策略" class="headerlink" title="Redis淘汰策略"></a>Redis淘汰策略</h2><ul>
<li><p><strong>Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据</strong></p>
</li>
<li><p><strong>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。</strong></p>
</li>
<li><p><strong>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。</strong></p>
</li>
<li><p><strong>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</strong></p>
</li>
<li><p><strong>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。</strong></p>
</li>
<li><p><strong>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。</strong></p>
</li>
<li><p><strong>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。</strong></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建ZooKeeper集群</title>
    <url>/2019/12/05/%E6%90%AD%E5%BB%BAZooKeeper%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="服务器搭建ZooKeeper集群"><a href="#服务器搭建ZooKeeper集群" class="headerlink" title="服务器搭建ZooKeeper集群"></a>服务器搭建ZooKeeper集群</h2><ol>
<li><strong><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html"><font color="#1A5276" >jdk下载</font><br/></a></strong></li>
</ol>
<ul>
<li>下载完成后解压tar包<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">tar</span> <span class="operator">-</span><span class="variable">zxvf</span> <span class="variable">jdk</span><span class="operator">.</span><span class="variable">tar</span> <span class="operator">-</span><span class="built_in">C</span> 解压到指定目录</span><br></pre></td></tr></table></figure></li>
<li>配置环境变量<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export JAVA_HOME=jdk解压路径&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:$JAVA_HOME/bin&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/bin&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li><strong>创建ZooKeeper用户组</strong><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo groupadd zookeeper</span></span><br><span class="line"><span class="attribute">sudo useradd zookeeper -g zookeeper</span></span><br></pre></td></tr></table></figure></li>
<li><strong><a href="http://archive.apache.org/dist/zookeeper/zookeeper-3.4.12/"><font color="#1A5276" >ZooKeeper下载</font><br/></a></strong></li>
</ol>
<ul>
<li>下载完之后解压安装包<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf zookeeper-<span class="number">3</span>.<span class="number">4</span>.<span class="number">12</span>.tar.gz -C 解压指定目录</span><br></pre></td></tr></table></figure></li>
<li>配置环境变量<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export ZOOKEEPER_HOME=zookeeper解压路径&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:$ZOOKEEPER_HOME/bin:$ZOOKEEPER_HOME/conf&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li>
<li>修改ZooKeePer解压的目录所属用户组<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chown</span> zookeeper:zookeeper -R zookeeper-<span class="number">3</span>.<span class="number">4</span>.<span class="number">12</span></span><br></pre></td></tr></table></figure></li>
<li>复制示例配置文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> zookeeper/conf/</span><br><span class="line"><span class="built_in">cp</span> zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure></li>
<li>修改配置信息<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ticketTime</span>=<span class="number">2000</span></span><br><span class="line"><span class="attribute">initLimit</span>=<span class="number">10</span></span><br><span class="line"><span class="attribute">syncLimit</span>=<span class="number">5</span></span><br><span class="line"><span class="comment"># 数据路径</span></span><br><span class="line"><span class="attribute">dataDir</span>=/zookeeper-<span class="number">3</span>.<span class="number">4</span>.<span class="number">12</span>/data</span><br><span class="line"><span class="comment"># 日志路径</span></span><br><span class="line"><span class="attribute">dataLogDir</span>=/zookeeper-<span class="number">3</span>.<span class="number">4</span>.<span class="number">12</span>/logs</span><br><span class="line"><span class="attribute">clientPort</span>=<span class="number">2181</span></span><br><span class="line"><span class="comment"># cluster info</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">1</span>=node151:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">2</span>=node152:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">3</span>=node153:<span class="number">2888</span>:<span class="number">3888</span></span><br></pre></td></tr></table></figure></li>
<li>创建数据目录,日志目录<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">sudo -u zookeeper mkdir  data</span><br><span class="line">sudo -u zookeeper mkdir logs</span><br></pre></td></tr></table></figure></li>
<li>修改bin目录项zkEnv.sh命令<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> <span class="keyword">vim</span> /zookeeper-<span class="number">3.4</span>.<span class="number">12</span>/bin/zkEnv.<span class="keyword">sh</span></span><br><span class="line">修改内容:</span><br><span class="line">ZOO_LOG_DIR=<span class="string">&quot;/zookeeper-3.4.12/logs&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>创建myid文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touck /zookeeper-3.4.12/data/myid</span><br><span class="line">填入内容与zoo.cfg文件中server编号一致</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt; myid</span><br></pre></td></tr></table></figure></li>
<li>复制到另外俩太机器上一次修改myid文件内容<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;2&quot;</span> &gt; myid</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;3&quot;</span> &gt; myid</span><br></pre></td></tr></table></figure></li>
<li>配置hosts<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">ip <span class="symbol">node151</span></span><br><span class="line">ip <span class="symbol">node152</span></span><br><span class="line">ip <span class="symbol">node153</span></span><br></pre></td></tr></table></figure></li>
<li>启动ZooKeeper集群<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> -u zookeeper -E /zookeeper-<span class="number">3</span>.<span class="number">4</span>.<span class="number">12</span>/bin/zkServer.sh start</span><br></pre></td></tr></table></figure></li>
<li>查看启动状态<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> -u zookeeper -E /zookeeper-<span class="number">3</span>.<span class="number">4</span>.<span class="number">12</span>/bin/zkServer.sh status</span><br></pre></td></tr></table></figure></li>
<li>停止集群<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> -u zookeeper -E /zookeeper-<span class="number">3</span>.<span class="number">4</span>.<span class="number">12</span>/bin/zkServer.sh stop</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li><strong><font color="#E74C3C">如果查看状态报错:Error contacting service. It is probably not running.</font><br/></strong><ol>
<li>说明zkEnv.sh命令内容没有修改日志路径</li>
<li>查看服务器防火墙是否关闭</li>
<li>查看配置文件是否配置成功</li>
<li>查看host是否配置成功</li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>Environment build</tag>
      </tags>
  </entry>
</search>
